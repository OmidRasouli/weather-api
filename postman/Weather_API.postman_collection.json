{
  "info": {
    "name": "Weather API",
    "description": "Collection for testing the Weather API service",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            },
            "description": "Authenticate and obtain a JWT. Stores token in environment as {{token}}."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "let t = '';",
                  "try {",
                  "  const json = pm.response.json();",
                  "  t = json.token || json.accessToken || json.access_token || '';",
                  "} catch (e) {}",
                  "if (t) {",
                  "  pm.environment.set('token', t);",
                  "  pm.test('Token captured', function () { pm.expect(pm.environment.get('token')).to.be.ok; });",
                  "} else {",
                  "  pm.test('Token not found in response', function () { pm.expect(false).to.be.true; });",
                  "}"
                ]
              }
            }
          ]
        }
      ],
      "description": "Authentication endpoints"
    },
    {
      "name": "Health Checks",
      "item": [
        {
          "name": "Basic Health Check",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Basic health check that returns 200 OK if the service is running"
          }
        },
        {
          "name": "Readiness Check",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/health/ready",
              "host": ["{{baseUrl}}"],
              "path": ["health", "ready"]
            },
            "description": "Readiness check that verifies connections to PostgreSQL and Redis"
          }
        },
        {
          "name": "Liveness Check",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/health/live",
              "host": ["{{baseUrl}}"],
              "path": ["health", "live"]
            },
            "description": "Liveness check for container orchestration systems like Kubernetes"
          }
        }
      ],
      "description": "Health check endpoints for monitoring service status"
    },
    {
      "name": "Get All Weather Records",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/weather",
          "host": ["{{baseUrl}}"],
          "path": ["weather"]
        },
        "description": "Retrieves all weather records from the database"
      }
    },
    {
      "name": "Get Weather By ID",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/weather/{{weatherId}}",
          "host": ["{{baseUrl}}"],
          "path": ["weather", "{{weatherId}}"]
        },
        "description": "Retrieves a specific weather record by its ID"
      }
    },
    {
      "name": "Fetch and Store Weather",
      "request": {
        "method": "POST",
        "url": {
          "raw": "{{baseUrl}}/weather",
          "host": ["{{baseUrl}}"],
          "path": ["weather"]
        },
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"city\": \"London\",\n    \"country\": \"UK\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "description": "Fetches weather data from external API for a city and country, and stores it in the database (requires JWT)"
      }
    },
    {
      "name": "Update Weather",
      "request": {
        "method": "PUT",
        "url": {
          "raw": "{{baseUrl}}/weather/{{weatherId}}",
          "host": ["{{baseUrl}}"],
          "path": ["weather", "{{weatherId}}"]
        },
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"city\": \"London\",\n    \"country\": \"UK\",\n    \"temperature\": 25.5,\n    \"humidity\": 70,\n    \"windSpeed\": 4.2,\n    \"description\": \"Partly cloudy\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "description": "Updates an existing weather record (requires JWT)"
      }
    },
    {
      "name": "Delete Weather",
      "request": {
        "method": "DELETE",
        "url": {
          "raw": "{{baseUrl}}/weather/{{weatherId}}",
          "host": ["{{baseUrl}}"],
          "path": ["weather", "{{weatherId}}"]
        },
        "header": [
          { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
        ],
        "description": "Deletes a weather record (requires JWT)"
      }
    },
    {
      "name": "Get Latest Weather By City",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/weather/latest/{{cityName}}",
          "host": ["{{baseUrl}}"],
          "path": ["weather", "latest", "{{cityName}}"]
        },
        "description": "Retrieves the most recent weather record for a specific city"
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "weatherId",
      "value": "your-weather-id",
      "type": "string"
    },
    {
      "key": "cityName",
      "value": "London",
      "type": "string"
    }
  ]
}
