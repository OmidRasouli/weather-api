{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "A RESTful API for weather data management",
        "title": "Weather APIServerPort",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/health": {
            "get": {
                "description": "Returns 200 OK if the service is running",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Basic health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.HealthResponse"
                        }
                    }
                }
            }
        },
        "/health/live": {
            "get": {
                "description": "Simple check for container orchestration",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Liveness check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.HealthResponse"
                        }
                    }
                }
            }
        },
        "/health/ready": {
            "get": {
                "description": "Verifies connections to PostgreSQL and Redis",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Readiness check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.HealthResponse"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/controller.HealthResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate user and return a JWT access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.LoginRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "token response",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "invalid credentials",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/weather": {
            "get": {
                "description": "Retrieves all weather records from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "weather"
                ],
                "summary": "Get all weather records",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/weather.Weather"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to fetch weather records",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    }
                }
            },
            "post": {
                "description": "Fetches weather data from external API for a city and country, and stores it in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "weather"
                ],
                "summary": "Fetch and store weather data",
                "parameters": [
                    {
                        "description": "City and country information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.FetchWeatherRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/weather.Weather"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch weather data",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    }
                }
            }
        },
        "/weather/latest/{city}": {
            "get": {
                "description": "Retrieves the latest weather record for a specific city",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "weather"
                ],
                "summary": "Get latest weather by city",
                "parameters": [
                    {
                        "type": "string",
                        "description": "City name",
                        "name": "city",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/weather.Weather"
                        }
                    },
                    "404": {
                        "description": "Weather data not found for the city",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    }
                }
            }
        },
        "/weather/{id}": {
            "get": {
                "description": "Retrieves a specific weather record by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "weather"
                ],
                "summary": "Get weather by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Weather ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/weather.Weather"
                        }
                    },
                    "404": {
                        "description": "Weather data not found",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing weather record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "weather"
                ],
                "summary": "Update weather record",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Weather ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Weather information to update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.UpdateWeatherRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/weather.Weather"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    },
                    "404": {
                        "description": "Weather data not found",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    },
                    "500": {
                        "description": "Failed to update weather data",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a weather record by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "weather"
                ],
                "summary": "Delete weather record",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Weather ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Weather record deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Weather data not found",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    },
                    "500": {
                        "description": "Failed to delete weather record",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.FetchWeatherRequest": {
            "type": "object",
            "required": [
                "city",
                "country"
            ],
            "properties": {
                "city": {
                    "type": "string",
                    "minLength": 1
                },
                "country": {
                    "type": "string",
                    "maxLength": 3,
                    "minLength": 2
                }
            }
        },
        "controller.HealthResponse": {
            "type": "object",
            "properties": {
                "components": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "controller.LoginRequestDTO": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "secret"
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "controller.UpdateWeatherRequest": {
            "type": "object",
            "required": [
                "city",
                "country"
            ],
            "properties": {
                "city": {
                    "type": "string",
                    "minLength": 1
                },
                "country": {
                    "type": "string",
                    "maxLength": 3,
                    "minLength": 2
                },
                "description": {
                    "type": "string"
                },
                "humidity": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 0
                },
                "temperature": {
                    "type": "number"
                },
                "windSpeed": {
                    "type": "number",
                    "minimum": 0
                }
            }
        },
        "errors.AppError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "details": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "weather.Weather": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "fetchedAt": {
                    "type": "string"
                },
                "humidity": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "temperature": {
                    "type": "number",
                    "format": "float64"
                },
                "updatedAt": {
                    "type": "string"
                },
                "windSpeed": {
                    "type": "number",
                    "format": "float64"
                }
            }
        }
    }
}